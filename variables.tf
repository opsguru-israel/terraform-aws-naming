variable "environment" {
  type        = string
  default     = ""
  description = "Environment name element + tag(label)."
}

variable "location" {
  type        = string
  default     = ""
  description = <<-EOT
    Location name element + tag(label).
    If provided in conventional form e. g. 'us-west-1' the name will contain short form, tag will contain full one (check `short_location` variable).
    If provided in custom form e. g. 'us-west-1d' or 'uw1d' will be used as is.
    If provided in custom form and a `delimiter` value is present in, it will be stripped in the name generation to save parsing ability.
    EOT
}

variable "short_location" {
  type        = bool
  default     = true
  description = <<-EOT
    Use short version of the region as the name element e.g. 'usw2' for 'us-west-1'.
    EOT
}

variable "description" {
  type        = string
  default     = ""
  description = "Description name element + tag(label). Additional description."
}

variable "prefix" {
  type        = string
  default     = ""
  description = "Prefix to be used in name generation."
}

variable "suffix" {
  type        = list(string)
  default     = []
  description = "Suffix to be used in name generation."
}

variable "max_length" {
  type        = number
  default     = 63
  description = "Maximum length allowed for the name generation."
}

variable "unique_seed" {
  type        = string
  default     = ""
  description = "Custom value for the random characters to be used."
}

variable "unique_length" {
  type        = number
  default     = 4
  description = "Max length of the uniqueness suffix to be added."
}

variable "unique_include_numbers" {
  type        = bool
  default     = true
  description = "To include numbers in the unique generation."
}

variable "delimiter" {
  type        = string
  default     = "-"
  description = <<-EOT
    Delimiter to be used between name elements.
    Defaults to `-` (hyphen). Set to `""` to use no delimiter at all.
  EOT
}

variable "resource_types" {
  type        = set(string)
  default     = []
  description = <<-EOT
    Set of resource types to generate names and tags in output.
    If resource type provided (any resource from `terraform_aws` provider without the `aws_` prefix), specific output for this resource will be generated with resource type in the name and category in tags.
    Default is `[]` to generate only general output.
    EOT
}

variable "tags" {
  type = set(string)
  default = [
    "Name",
    "Environment",
    "ResourceType",
    "Category",
    "Location",
    "Description",
    "ManagedBy"
  ]
  description = <<-EOT
    Set of tags (labels) to include in the `tags` output.
    Default is to include all tags.
    Tags with empty values will not be included in the `tags` output.
    Set to `[]` to suppress all generated tags.
    EOT

  validation {
    condition     = alltrue([for v in var.tags : contains(["Name", "Environment", "ResourceType", "Category", "Location", "Description", "ManagedBy"], v)]) || length(var.tags) == 0
    error_message = "The list can only contain 'Name', 'Environment', 'ResourceType', 'Category', 'Location', 'Description', or 'ManagedBy', or it can be empty."
  }
}

variable "additional_tags" {
  type        = map(string)
  default     = {}
  description = "Additional tags (e.g. `{'ResourceOwner': 'XYZ'}`)."
}

variable "name_element_order" {
  type = list(string)
  default = [
    "environment",
    "resource",
    "location",
    "description"
  ]
  description = <<-EOT
    The order in which the elements appear in the name.
    The `prefix` and `suffix` elements are always putted to respectfull places if provided.
    You can omit any of the elements. Empty values won't be rendered.
    EOT

  validation {
    condition     = alltrue([for v in var.name_element_order : contains(["environment", "resource", "location", "description"], v)]) || length(var.name_element_order) == 0
    error_message = "The list can only contain 'environment', 'resource', 'location', or 'description', or it can be empty."
  }
}

variable "tag_key_case" {
  type        = string
  default     = "title"
  description = <<-EOT
    Controls the letter case of the `tags` keys (label names) for tags generated by this module.
    Does not affect keys of tags passed in via the `tags` input.
    Possible values: `lower`, `title`, `upper`.
    Default value: `title`.
  EOT

  validation {
    condition     = contains(["lower", "title", "upper"], var.tag_key_case)
    error_message = "Allowed values: `lower`, `title`, `upper`."
  }
}

variable "tag_value_case" {
  type        = string
  default     = "lower"
  description = <<-EOT
    Controls the letter case of elements (labels) as included in `name`,
    set as tag values, and output by this module individually.
    Does not affect values of tags passed in via the `tags` input.
    Possible values: `lower`, `title`, `upper` and `none` (no transformation).
    Set this to `title` and set `delimiter` to `""` to yield Pascal Case IDs.
    Default value: `lower`.
  EOT

  validation {
    condition     = contains(["lower", "title", "upper", "none"], var.tag_value_case)
    error_message = "Allowed values: `lower`, `title`, `upper`, `none`."
  }
}
